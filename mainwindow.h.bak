#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QMainWindow>
#include <QProcess>
#include "Joystick/v_joystick_adapter.h"
#include "Thread/ControllerMsgSendThread.h"
#include "Thread/ControllerMsgRcvThread.h"
#include "Thread/videothread.h"
#include "Utils/ControllerState.h"
#include "Utils/ShowMessage.h"
#include "Utils/ConstInfo.h"
#include "Utils/RobotState.h"
#include "OgreView/OgreView.h"
#include "Thread/TabletBatteryLevelRequest.h"

namespace Ui {
class MainWindow;
}

class VlcInstance;
class VlcMedia;
class VlcMediaPlayer;


Q_DECLARE_METATYPE ( ConstInfo::TypeMessage );

class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    explicit MainWindow(QWidget *parent = 0);
    ~MainWindow();

private slots:
    void on_btVideo_clicked();
    void on_btAudio_clicked();
    void on_btLight_clicked();
    void on_btLightIR_clicked();

    void buttonChanged(int id, bool state);
    void axisChanged(int id, int state);
    void on_btRemote_clicked();

    void lightOff(bool isIRLight);
    void setLight(int lightId, int lightValue,bool isIRLight);
    void doItAgain(QString str);
    void onTalk();
    void onListen();
    void errorConnection(int port);
    void isConnected(int port);
    //void onRecordVideo();
    void sendToRobot();

    //07.10.2015 Kondrat

    void startVideoStream( VlcMedia  *_media);


    void on_btArm456_clicked();

    void on_btArm234_clicked();

    void on_btArm123_clicked();

    void on_btFast_clicked();

    void on_btSlow_clicked();



    void on_btStopMove_clicked();

    void on_btWindowMode_clicked();

    void changePositionArm(int idArmJoint, int positionValue);
    void changeLight(int idLight, int lightLevel, bool isIRLight);
    void changeBatteryLevelRob(int batteryLevel);
    void changeSignalLevelRob(int signalLevel);

    void on_btCamera_clicked();

    // tablet battery level
    void setBatteryLevel(int batteryLevel);

    void on_btConnection_clicked();

    void on_btPhoto_clicked();

    void on_btArm_clicked();
    void onOneJoystick();
    void onTwoJoystick();

private:
    Ui::MainWindow *ui;

    OgreView *ogreView;

    VJoystickAdapter* joystick;
    ControllerState *contrState;
    RobotState *robotState;
    ControllerMsgSendThread *cntrlMsgSendThread;
    ControllerMsgRcvThread *cntrlMsgRcvThread;
    ShowMessage *showMessage;
    VideoThread *videoThr;
    bool isMaximizedStayOnTop;

    VlcInstance *_instance;
    VlcMedia *_media;
    VlcMediaPlayer *_player;
//    QString btNameRecord;
    QProcess * m_process;

    TabletBatteryLevelRequest *battLevelThr;

    bool startMedia;
    void joystickInit();

    bool isVideoConnected;
    bool isSendConnected;
    bool isReceiveConnected;
    bool isStop;
    bool isTwoJoystick;//true- 2 джойстика, false-1 джойстик
    MoveMode modeMove;

    void clearColorFilterArmR();        // гасим на экране подсветку кнопок режимов руки справа на экране(2 джойстика)
    void clearColorFilterArm();         // гасим на экране подсветку кнопок режимов руки
    void clearColorFilterMove();        // гасим на экране подсветку кнопок режимов движения
    void changeLightIndicatorArm();     // изменение индикации режимов руки (световой и на экране)
    void changeLightIndicatorMove();    // изменение индикации режимов движения (световой и на экране)
    void setLedLigths();                // установка Led индикации
    void setIndicatorArm();             // установка на экране режимов руки
    void setVisibleRArmButtons(bool visible); // управление отображением кнопок для второго джойстика

    void changesStateButtonMove(); // выполнение слотов  при работе с кнопками пульта ДВИЖЕНИЕ  //kun
    void changesStateButtonArm();  // выполнение слотов  при работе с кнопками пульта РУКА //kun
    void setInterfaceTwoJoystick(bool twoJoystick);
signals:

    void message(QString message, ConstInfo::TypeMessage typeMessage);


};

#endif // MAINWINDOW_H
